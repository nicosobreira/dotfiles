#!/usr/bin/env bash

set -eou pipefail
#set -x

WGET_OUTPUT="-q --show-progress"
DEPENDENCIES="git make tar curl wget unzip"
PACKGES="tree gh stow vim"
HOME_FOLDERS=".config .bin .local"
LOCAL_FOLDERS="bin share state lib"
NULL="NULL"
PREFIX="$HOME/.local"

get_latest_repo_version() {
	local git_user_name=$1
	local git_repo=$2
	local tag_name_pre=""
	if [[ -z "${3:-}" ]]; then
		tag_name_pre="v"
	else
		if [[ ! "$3" =~ "$NULL" ]]; then
			tag_name_pre="$3"
		fi
	fi
	echo "$(curl -s "https://api.github.com/repos/${git_user_name}/${git_repo}/releases/latest" | grep -oP "\"tag_name\": \"${tag_name_pre}\K[0-9.]+" | head -1)"
}

check_need_update() {
	if [[ $# -lt 3 ]]; then
		echo "Error: Less than three arguments"
		return 2
	fi
	local program=$1
	local search_string=$2
	local git_user_name=$3
	local git_repo=${4:-$1}
	local version_arg=${5:-"--version"}
	local tag_name_pre=${6:-}
	local current_version=""
	if command -v "${program}" >/dev/null; then
		echo "Getting the current version"
		current_version=$(${program} ${version_arg} 2>/dev/null | grep -oP "${search_string}\K[0-9.]+" | head -1)
	fi
	echo "Getting the latest version from ${git_user_name}/${git_repo}"
	latest_version=$(get_latest_repo_version "${git_user_name}" "${git_repo}" "${tag_name_pre}")
	if [[ -z $latest_version ]]; then
		echo "Error: Unable to access ${git_user_name}/${git_repo}"
		return 3
	fi
	if [[ "${current_version}" == "${latest_version}" ]]; then
		echo "${program} is already in the latest version (${latest_version})"
		return 1
	fi
	return 0
}

install_tmux() {
	echo -e "\tInstalling Tmux"
	local git_user_name="tmux"
	local git_repo="tmux"
	if ! check_need_update "tmux" "tmux " "$git_user_name" "$git_repo" "-V" "${NULL}"; then
		return
	fi
	sudo apt install libevent-dev ncurses-dev build-essential bison pkg-config
	local latest=$(get_latest_repo_version "$git_user_name" "$git_repo" "$NULL")
	local folder="tmux-${latest}a"
	local tar_file="${folder}.tar.gz"
	cd /tmp
	wget ${WGET_OUTPUT} "https://github.com/tmux/tmux/releases/latest/download/${tar_file}"
	tar -xf ${tar_file}
	cd $folder
	./configure --prefix=${PREFIX}
	make && make install
}

install_fzf() {
	echo -e "\tInstalling Fzf"
	local git_user_name="junegunn"
	local git_repo="fzf"
	if ! check_need_update "fzf" "" ${git_user_name} ${git_repo}; then
		return
	fi
	local latest_version=$(get_latest_repo_version "${git_user_name}" "${git_repo}")
	local tar_file="fzf-${latest_version}-linux_amd64.tar.gz"
	cd /tmp
	wget ${WGET_OUTPUT} "https://github.com/${git_user_name}/${git_repo}/releases/latest/download/${tar_file}"
	tar -xf "${tar_file}"
	mv "/tmp/fzf" "$PREFIX/bin"
}

install_yazi() {
	echo -e "\tInstalling Yazi"
	if ! check_need_update "yazi" "Yazi " "sxyazi" "yazi"; then
		return
	fi
	if ! command -v rustup >/dev/null; then
		curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
		if [[ "$SHELL" =~ "fish" ]]; then
			source $HOME/.cargo/env.fish
		elif [[ "$SHELL" =~ "nu" ]]; then
			source $HOME/.cargo/env.nu
		else
			source "$HOME/.cargo/env"
		fi
		rustup update
	fi
	local git_repo="yazi"
	cd /tmp
	git clone https://github.com/sxyazi/yazi.git ${git_repo}
	cd ${git_repo}
	cargo build --release --locked
	mv target/release/yazi target/release/ya $PREFIX/bin/
}

install_zoxide() {
	echo -e "\tInstalling Zoxide"
	curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh
}

install_lazygit() {
	echo -e "\n\tInstalling Lazygit"
	local git_user_name="jesseduffield"
	local git_repo="lazygit"
	if ! check_need_update "lazygit" "version=" "${git_user_name}" "${git_repo}"; then
		return
	fi
	local bin_file="lazygit"
	local tar_file="lazygit.tar.gz"
	local latest_version="$(get_latest_repo_version "${git_user_name}" "${git_repo}")"
	cd /tmp
	wget ${WGET_OUTPUT} -O ${tar_file} \
		"https://github.com/jesseduffield/lazygit/releases/download/v${latest_version}/lazygit_${latest_version}_Linux_x86_64.tar.gz"
	echo "Extract ${tar_file}"
	tar xf ${tar_file} ${bin_file}
	echo "Installing lazygit"
	install ${bin_file} -D -t $PREFIX/bin
}

install_neovim() {
	echo -e "\n\tInstalling Neovim"
	#sudo apt install npm python3-full
	if ! check_need_update "nvim" "v" "neovim" "neovim"; then
		return
	fi
	cd /tmp
	local folder_name="nvim-linux-x86_64"
	local tar_file="${folder_name}.tar.gz"
	local folders=("bin" "lib" "share")
	wget ${WGET_OUTPUT} -O ${tar_file} \
		https://github.com/neovim/neovim/releases/latest/download/${folder_name}.tar.gz
	tar -xzf ${tar_file}
	for dir in "${folders[@]}"; do
		cp -R ${folder_name}/${dir}/* $PREFIX/${dir}
	done
}

install_all() {
	echo -e "\tInstalling packges: ${PACKGES}"
	sudo apt install ${PACKGES}
	install_zoxide
	install_yazi
	install_neovim
	install_lazygit
	install_fzf
	install_tmux
}

create_folders() {
	local destination=$1
	local folders=$2

	IFS=' ' read -r -a array_folders <<< "$folders"

	for folder in "${array_folders[@]}"; do
		folder="${destination}/${folder}"
		[[ -d ${folder} ]] && continue

		echo "Creating ${folder}"
		mkdir -p ${folder}
	done
}

clone_dotfiles() {
	local dotfiles="$HOME/dotfiles"
	if [[ ! -d "${dotfiles}" ]]; then
		git clone https://github.com/nicosobreira/dotfiles "${dotfiles}"
	fi
	local choice=""
	read -p "Do you want to stow the dotfiles? [Y/N] " choice
	case $choice in
		[yYsS])
			cd $dotfiles
			stow -R .
			;;
		*)
			;;
	esac
}

show_help() {
	cat << EOF
Usage: $0 [OPTIONS] [APPS]

OPTIONS:
	install [APPS]	App names to install
	help		See help

APPS:
	all		Install all apps above
	neovim|nvim
	yazi		Dependencies are very large!
	zoxide
	lazygit
	fzf
	tmux

Examples:
	$0 install neovim yazi
	$0 install all
EOF
}

if [[ $# -eq 0 ]]; then
	echo "Error: Type at least one argument"
	show_help
	exit 1
fi

while [[ $# -gt 0 ]]; do
	case "$1" in
		install)
			shift
			echo -e "\tInstalling dependencies: ${DEPENDENCIES}"
			sudo apt install ${DEPENDENCIES}
			create_folders "$HOME" "${HOME_FOLDERS}"
			create_folders "$PREFIX" "${LOCAL_FOLDERS}"
			clone_dotfiles
			for app in "$@"; do
				case "${app}" in
					neovim|nvim) install_neovim;;
					yazi) install_yazi;;
					zoxide) install_zoxide;;
					lazygit) install_lazygit;;
					fzf) install_fzf;;
					tmux) install_tmux;;
					all) install_all;;
					*)
						echo "Unkown app \"${app}\""
						show_help
						exit 2
						;;
				esac
			done
			break
			;;
		help)
			show_help
			break
			;;
		*)
			echo "Error: Unkown argument \"${1}\""
			show_help
			exit 1
			;;
	esac
done
